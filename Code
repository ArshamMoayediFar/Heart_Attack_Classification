# 1) Importing needed Libraries
import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier
%matplotlib inline

# 2) Importing Data
df = pd.read_csv("Classification_Project.csv")
df.head ()
print (df.dtypes)
#print(df.size)  #what was the one with shape??? 
df['oldpeak'] = df['oldpeak'].astype('int64')   # making all of them int4
#df.dtypes
df.head ()  
#df.shape    #303*14

# 3) what we know about our set?
df['output'].value_counts()        
df.hist(column='output', bins=50)  

# 4) Lets clean the data set
df['age'] = df['age'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['sex'] = df['sex'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['cp'] = df['cp'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['trtbps'] = df['trtbps'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['chol'] = df['chol'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['fbs'] = df['fbs'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['restecg'] = df['restecg'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['thalachh'] = df['thalachh'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['exng'] = df['exng'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['oldpeak'] = df['oldpeak'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['slp'] = df['slp'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['caa'] = df['caa'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['thall'] = df['thall'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
df['output'] = df['output'].replace([' ',','],'',regex=True)    # modifying , and spaces in dataframe
#print(df.size) #check if some data might be missed 

# 5)lets change data from Pandas To numpy
X = df[['age','sex','cp','trtbps', 'chol','fbs', 'restecg','thalachh','exng','oldpeak','slp', 'caa','thall']] .values  #.astype(float)
X[0:5]
y = df['output'].values
y[0:5]

# 6)Normalizing Data
X = preprocessing.StandardScaler().fit(X).transform(X)
X[0:5]

# 7)Splitting Data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

# 8)Classification
## 8-1) K nearest neighbor (KNN)
from sklearn.neighbors import KNeighborsClassifier
### Training
k = 17
#Train Model and Predict  
neigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)
neigh
### Prediction
yhat = neigh.predict(X_test)
print (yhat[0:10])
print (y_test[0:10])

### Evaluation
from sklearn import metrics
print("Train set Accuracy: ", metrics.accuracy_score(y_train, neigh.predict(X_train)))
print("Test set Accuracy: ", metrics.accuracy_score(y_test, yhat))

### Finding the best K
Ks = 20
mean_acc = np.zeros((Ks-1))
std_acc = np.zeros((Ks-1))

for n in range(1,Ks):
    
    #Train Model and Predict  
    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)
    yhat=neigh.predict(X_test)
    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)

    
    std_acc[n-1]=np.std(yhat==y_test)/np.sqrt(yhat.shape[0])

mean_acc

### Visualization
plt.plot(range(1,Ks),mean_acc,'g')
plt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)
plt.fill_between(range(1,Ks),mean_acc - 3 * std_acc,mean_acc + 3 * std_acc, alpha=0.10,color="green")
plt.legend(('Accuracy ', '+/- 1xstd','+/- 3xstd'))
plt.ylabel('Accuracy ')
plt.xlabel('Number of Neighbors (K)')
plt.tight_layout()
plt.show()

print( "The best accuracy was with", mean_acc.max(), "with k=", mean_acc.argmax()+1) 

## 8-2) Decision Tree 
drugTree = DecisionTreeClassifier(criterion="entropy", max_depth = 10)
drugTree # it shows the default parameters
### Train
drugTree.fit(X_train,y_train)
#Split data sete are named as follows; X_train, X_test, y_train, y_test
### Prediction
predTree = drugTree.predict(X_test)
print (predTree [0:10])
print (y_test [0:10])
### Evaluation
from sklearn import metrics
import matplotlib.pyplot as plt
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_test, predTree))

## 8-3) Logistic Regression with Scikit-learn
### Train
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)
LR

### Predict
yhat = LR.predict(X_test)
print (yhat [0:10])
print (y_test [0:10])  
yhat_prob = LR.predict_proba(X_test)
yhat_prob [0:10]

### Evaluation
#### jaccard index
from sklearn.metrics import jaccard_score
jaccard_score(y_test, yhat,pos_label=0)

#### confusion matrix
from sklearn.metrics import classification_report, confusion_matrix
import itertools
def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
print(confusion_matrix(y_test, yhat, labels=[1,0]))

# Compute confusion matrix
cnf_matrix = confusion_matrix(y_test, yhat, labels=[1,0])
np.set_printoptions(precision=2)


# Plot non-normalized confusion matrix
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=['High=1','Low=0'],normalize= False,  title='Confusion matrix')

print (classification_report(y_test, yhat))

#### Log Loss
from sklearn.metrics import log_loss
log_loss(y_test, yhat_prob)

## 8-4) SVM
### Train   
from sklearn import svm
clf = svm.SVC(kernel='rbf')
clf.fit(X_train, y_train) 

### Prediction
yhat = clf.predict(X_test)
print (yhat [0:10])
print (y_test [0:10])

### Evaluation

#### confusion matrix
from sklearn.metrics import classification_report, confusion_matrix
import itertools

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    
    


# Compute confusion matrix
cnf_matrix = confusion_matrix(y_test, yhat, labels=[1,0])
np.set_printoptions(precision=2)


# Plot non-normalized confusion matrix
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=['High=1','Low=0'],normalize= False,  title='Confusion matrix')

from sklearn.metrics import f1_score
f1_score(y_test, yhat, average='weighted') 

#### jaccard index
from sklearn.metrics import jaccard_score
jaccard_score(y_test, yhat,pos_label=0)

































